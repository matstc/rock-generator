.modal.info-modal.fade(tabindex="-1" role="dialog")
  .modal-dialog
    .modal-content
      .modal-header
        %button(type="button" class="close" data-dismiss="modal" aria-label="Close")
          %span(aria-hidden="true") &times;
        %h2 Rock Generator
      .modal-body
        %p This app generates the following progressions:
        %ul
          - RockProgressionGenerator::PROGRESSIONS.each do |progression|
            %li= progression.join(" â€“ ")

        %p Using the following keys:
        %ul
          - RockProgressionGenerator::MAIN_KEYS.each do |key|
            %li= key

        %footer
          %hr
          %p
            Like this app?
            = link_to "Here's the code.", 'https://github.com/matstc/rock-generator'

.action-bar.clearfix
  .btn-subgroup
    = button_tag '', onclick: 'PLAYER.toggleAudio(event);', class: 'btn btn-default', style: 'display:none;' do
      %span.glyphicon.glyphicon-play
    = button_tag '', onclick: 'PLAYER.toggleAudio(event);', class: 'btn btn-default', style: 'display:none;' do
      %span.glyphicon.glyphicon-pause
  .btn-subgroup
    %span
      %span.bpm 120
      BPM
    .btn-group
      = button_tag '', onclick: 'PLAYER.speedDown(event);', class: 'btn btn-default' do
        %span.glyphicon.glyphicon-minus
      = button_tag '', onclick: 'PLAYER.speedUp(event);', class: 'btn btn-default' do
        %span.glyphicon.glyphicon-plus
  .btn-subgroup
    .btn-group
      = button_tag '', onclick: 'generate(); return false;', class: 'btn btn-default' do
        %span.glyphicon.glyphicon-refresh
      = button_tag '', 'data-toggle' => "modal", 'data-target' => ".info-modal", 'class' => 'btn btn-default' do
        %span.glyphicon.glyphicon-info-sign
      = button_tag 'Fullscreen', onclick: 'toggleFullScreen(); return false;', class: 'btn btn-default' do
        %span.glyphicon.glyphicon-fullscreen

%table.progression
  - progression.in_groups_of(4).each do |four_chords|
    %tr
      - four_chords.each do |chord|
        %td{onclick: "PLAYER.goTo(#{progression.index(chord)});"}= fix_letter_spacing(chord)


:javascript
  MIDI.loadPlugin({
    soundfontUrl: "/assets/",
    instrument: "acoustic_grand_piano",
    onprogress: function(state, progress) {
      console.log(state, progress);
    },
    onsuccess: function() {
      var progression = [ #{raw progression.map{|chord| "'#{chord[0]}2'"}.join(",")} ];
      MIDI.setVolume(0, 100);
      PLAYER.reset();
      PLAYER.use(progression);
    }
  });
